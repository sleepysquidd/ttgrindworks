extends Node

# ! Comments prefixed with "!" mean they are extra info. Comments without them
# ! should be kept because they give your mod structure and make it easier to
# ! read by other modders
# ! Comments with "?" should be replaced by you with the appropriate information

# ! This template file is statically typed. You don't have to do that, but it can help avoid bugs
# ! You can learn more about static typing in the docs
# ! https://docs.godotengine.org/en/3.5/tutorials/scripting/gdscript/static_typing.html

# Adds new options for how cosmetics are displayed

const MOD_DIR := "squiddy-Hatstack" # Name of the directory that this file is in
const LOG_NAME := "squiddy-Hatstack:Main" # Full ID of the mod (AuthorName-ModName)

var mod_dir_path := ""
var extensions_dir_path := ""
var translations_dir_path := ""

# ! your _ready func.
func _init() -> void:
	ModLoaderLog.info("Init", LOG_NAME)
	mod_dir_path = ModLoaderMod.get_unpacked_dir().path_join(MOD_DIR)

	# Add extensions
	install_script_extensions()
	install_script_hook_files()

	# Add translations
	#add_translations()


func install_script_extensions() -> void:
	# ! any script extensions should go in this directory, and should follow the same directory structure as vanilla
	extensions_dir_path = mod_dir_path.path_join("extensions")

	# Needs to update to change how cosmetics are handled
	#ModLoaderMod.install_script_extension(extensions_dir_path.path_join("objects/items/classes/item_accessory.gd"))
	ModLoaderMod.install_script_extension(extensions_dir_path.path_join("objects/general_ui/settings_menu/settings_menu.gd"))
	ModLoaderMod.install_script_extension(extensions_dir_path.path_join("objects/globals/item_service.gd"))


func install_script_hook_files() -> void:
	extensions_dir_path = mod_dir_path.path_join("extensions")
	#ModLoaderMod.install_script_hooks("res://main.gd", extensions_dir_path.path_join("main.gd"))
	ModLoaderMod.install_script_hooks("res://objects/items/world_item/world_item.gd", extensions_dir_path.path_join("objects/items/world_item/world_item.hooks.gd"))
	ModLoaderMod.install_script_hooks("res://objects/items/classes/item_accessory.gd", extensions_dir_path.path_join("objects/items/classes/item_accessory.hooks.gd"))
	

func add_translations() -> void:
	# ! Place all of your translation files into this directory
	translations_dir_path = mod_dir_path.path_join("translations")

	# ! Load translations for your mod, if you need them.
	# ! Add translations by adding a CSV called "modname.csv" into the "translations" directory.
	# ! Godot will automatically generate a ".translation" file, eg "modname.en.translation".
	# ! Note that in this example, only the file called "modname.csv" is custom;
	# ! any other files in the "translations" directory were automatically generated by Godot
	ModLoaderMod.add_translation(translations_dir_path.path_join("modname.en.position"))


func _ready() -> void:
	ModLoaderLog.info("Ready", LOG_NAME)

	# ! This uses Godot's native `tr` func, which translates a string. You'll
	# ! find this particular string in the example CSV here: translations/modname.csv
	ModLoaderLog.info("Translation Demo: " + tr("MODNAME_READY_TEXT"), LOG_NAME)
	
	var settingsConfig := ModLoaderConfig.get_config("squiddy-Hatstack", "settings")
	if not settingsConfig:
		settingsConfig = ModLoaderConfig.create_config("squiddy-Hatstack", "settings", {
			"hats": 0,
			"backpacks": 0,
			"glasses": 0,
		})
	ModLoaderConfig.set_current_config(settingsConfig)
